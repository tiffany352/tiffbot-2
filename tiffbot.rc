use std::rt::io::net::*;
use std::rt::io::net::tcp::*;
use std::rt::io::net::ip::*;
use std::rt::io::extensions::*;
use std::rt::io::*;
use std::str::*;
//use parse::*;
//use irc::*;
use std::comm::*;
use std::task::*;
use std::io::println;

pub mod parse;
pub mod irc;

enum Event {
    Close(~str),
    Open(~str, ~str, ~str),
    Join(~str),
    HandleMsg(irc::Message),
}

fn message(cmd: ~str, args: ~[~str]) -> irc::Message {
    irc::Message {prefix: None, command: cmd, params: args}
}

fn notice(chan: ~str, msg: ~str) -> irc::Message {
    message(~"NOTICE", ~[chan, msg])
}

fn closed(con: ~Chan<~[irc::Message]>, port: Port<Event>) {
    match port.recv() {
        Open(nick, user, realname) => {
            println("*** Connecting.");
            con.send(~[
                message(~"NICK", ~[nick]),
                message(~"USER", ~[user, ~"0", ~"*", realname])
            ]);
            closed(con, port);
        }
        Close(msg) => {
            println("*** Quitting.");
            con.send(~[
                message(~"QUIT", ~[msg])
            ]);
        }
        HandleMsg(irc::Message {prefix: _, command: ~"001" /*RPL_WELCOME*/, params: _}) => {
            println("*** Ready.");
            con.send(~[]);
            ready(con, port);
        }
        HandleMsg(_) => { // ignore extraneous messages
            con.send(~[]);
            closed(con, port);
        }
        e => fail!(fmt!("Invalid event for state closed: %?", e))
    }
}

fn join(chan: ~str) -> irc::Message {
    println("*** Joining "+chan);
    message(~"JOIN", ~[chan])
}

fn ready(con: ~Chan<~[irc::Message]>, port: Port<Event>) {
    match port.recv() {
        Close(msg) => {
            println("*** Quitting.");
            con.send(~[
                message(~"QUIT", ~[msg])
            ]);
        }
        HandleMsg(irc::Message {prefix: sender, command: ~"PRIVMSG", params: [chan, msg]}) => {
            let pos = match msg.find(' ') {
                Some(n) => n,
                None => msg.len() - 1
            };
            let sendee = match chan {
                ~"tiffbot" => match sender {
                    Some(x) => x.nick,
                    None => {
                        con.send(~[]); 
                        ready(con, port); 
                        return;
                    }
                },
                _ => chan
            };
            con.send(match (msg[0], msg.slice(1, pos), msg.slice_from(pos+1)) {
                (43, "join", target) => ~[ // 43 == +
                    join(target.to_owned())
                ],
                (43, _, _) => ~[
                    notice(sendee, ~"Command!")
                ],
                _ => ~[]
            });
            ready(con, port);
        }
        HandleMsg(irc::Message {prefix: _, command: ~"PING", params: params}) => {
            con.send(~[
                message(~"PONG", params)
            ]);
            ready(con, port);
        }
        HandleMsg(_) => {
            con.send(~[]);
            ready(con,port);
        }
        Join(chan) => {
            println("*** Joining "+chan);
            con.send(~[
                message(~"JOIN", ~[chan])
            ]);
            ready(con, port);
        }
        e => fail!(fmt!("Invalid event for state ready: %?", e))
    }
}

fn start(con: ~Chan<~[irc::Message]>) -> Chan<Event> {
    let (port, chan) = stream();
    do spawn_with((con,port)) |(con,port)| {
        closed(con, port);
    }
    chan
}

fn read_line(con: &mut TcpStream) -> Option<~str> {
    let mut buf = ~[];
    loop {
        match con.read_byte() {
            None        => return None,
            Some(13)    => (), // 13 == \r; IRC rfc says to ignore impls which forget CR
            Some(10)    => return Some(from_utf8(buf)), // 10 == \n
            Some(c)     => buf.push(c)
        }
    }
}

fn send_messages(con: &mut TcpStream, arr: ~[irc::Message]) {
    for m in arr.iter() {
        let ts = m.to_str();
        println("<<< "+ts);
        con.write(ts.as_bytes() + "\r\n".as_bytes());
    }
}

fn main() {
    let args = std::os::args();
    if args.len() != 5 {
        println("Usage: "+args[0]+" <IP> <nick> <user> <realname>");
        return;
    }
    let ctx = irc::grammar();
    let mut con = TcpStream::connect(FromStr::from_str(args[1]).unwrap()).unwrap();
    let (port, chan) = stream();
    let chan = start(~chan);
    chan.send(Open(args[2].clone(), args[3].clone(), args[4].clone()));
    send_messages(&mut con, port.recv());
    loop {
        let line = read_line(&mut con).unwrap();
        println(">>> " + line.clone());
        let tok = parse::parse(&ctx, ctx.grammar.get(& &"message"), line, 0);
        match tok {
            Ok(parse::Token {value: irc::MessageT(msg), line: _}) => {
                chan.send(HandleMsg(msg));
                send_messages(&mut con, port.recv());
            }
            Err(e) => println(e.to_str()),
            _ => println("???")
        }
    }
}

